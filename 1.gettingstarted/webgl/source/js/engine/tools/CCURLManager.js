/*----------------------------------------------------------- * 2c - Cross Platform 3D Application Framework *----------------------------------------------------------- * Copyright ﾩ 2011 ﾖ 2011 France Telecom * This software is distributed under the Apache 2.0 license. * http://www.apache.org/licenses/LICENSE-2.0.html *----------------------------------------------------------- * File Name   : CCURLManager.js * Description : Manager for HTTP requests. * * Created     : 05/11/11 * Author(s)   : Ashraf Samy Hegab *----------------------------------------------------------- */ var CCURLRequest_not_started = 1;var CCURLRequest_in_flight = 2;var CCURLRequest_failed = 3;var CCURLRequest_timed_out = 4;var CCURLRequest_data_error = 5;var CCURLRequest_succeeded = 6;var CCURLRequest_cached = 7;function CCURLRequestData(url, data, callback, cacheFile, refresh){    this.url = url;	this.data = data;	this.callback = callback;    this.cacheFile = cacheFile;    this.refresh = refresh;}function CCURLManager(){        this.finish();    this.abortedTransfer = false;        this.requests = new Array();    this.requestCount = 0;		this.domainTimeOuts = new Array();		this.create();}var gURLManager = false;// ImplementationCCURLManager.prototype.create = function(){    this.httpRequestObject = false;        // Create a new XMLHttpRequest object to talk to the Web server	if( !this.httpRequestObject && typeof XMLHttpRequest != 'undefined' ) 	{		this.httpRequestObject = new XMLHttpRequest();	}	else	{		try 		{			this.httpRequestObject = new ActiveXObject( 'Msxml2.XMLHTTP' );		}		catch( e ) 		{			try 			{				this.httpRequestObject = new ActiveXObject( 'Microsoft.XMLHTTP' );			} 			catch( e2 ) 			{				this.httpRequestObject = false;			}		}	}        return this.httpRequestObject;}CCURLManager.prototype.ready = function(){    if( this.request == false )    {        if( this.httpRequestObject.readyState == 4 || this.abortedTransfer == true || this.httpRequestObject.readyState == 0 )        {            return true;        }    }        return false;}CCURLManager.prototype.abort = function(){    this.abortedTransfer = true;    this.httpRequestObject.abort();}CCURLManager.prototype.abortAll = function(){	if( this.ready() == false )	{		this.abort();		this.requestCount = 0;		this.requests.length = 0;	}}CCURLManager.prototype.open = function(){	var httpRequestObject = this.httpRequestObject;	var request = this.request;	if( request.data == null )	{		httpRequestObject.open( 'GET', request.url, true );	}	else	{		httpRequestObject.open( 'POST', request.url, true );		httpRequestObject.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );	}	httpRequestObject.onreadystatechange = function()    {        gURLManager.receiveData();    }}CCURLManager.prototype.start = function(){    if( this.abortedTransfer == true )    {        this.abortedTransfer = false;    }    this.httpRequestObject.send( this.request.data );}CCURLManager.prototype.finish = function(){    this.request = false;    this.responseData = false;}CCURLManager.prototype.requestURL = function(url, data, callback, cacheFile, refresh, timeout){    var request = new CCURLRequestData( url, data, callback, !cacheFile ? false : cacheFile, refresh != false ? true : false );    this.requestCount++;    this.requests.push( request );			CCURLManagerUpdate();}CCURLManager.prototype.popRequest = function(){    this.requestCount--;    return this.requests.pop();}CCURLManager.prototype.receiveData = function(){    if( this.httpRequestObject.readyState == 4 )    {        var state = this.httpRequestObject.status == 200 ? CCURLRequest_succeeded : CCURLRequest_failed;                var request = this.request;        if( state == CCURLRequest_succeeded && request.cacheFile != false )        {            gTools.saveData( request.cacheFile, this.httpRequestObject.responseText );        }        		if( request.callback != false )        {			request.callback.run( state, this.httpRequestObject.responseText, this.httpRequestObject );        }		else		{			if( this.httpRequestObject.status == 200 )			{				this.responseData = this.httpRequestObject.responseText;				if( this.responseData )				{					alert( this.responseData );				}			}			else			{				alert( "Status :" + this.httpRequestObject.status + " " + this.httpRequestObject.responseText );			}		}				// Finish		this.finish();				setTimeout( CCURLManagerUpdate, 500 );    }}function CCURLManagerUpdate(){    var urlManager = gURLManager;        // 1st Check if we have requests    // 2nd: Check if we have cached results    // 3rd: See if httpManager is ready    // 4th: See if we can access that domain    // 5th: Download        // Start our next request    var requestCount = urlManager.requestCount;	if( requestCount > 0 )	{		var request = urlManager.requests[0];        if( request.refresh == false && !request.checkedCache )        {            request.checkedCache = true;            var cacheFile = request.cacheFile;            if( cacheFile != false )            {                var data = gTools.loadData( cacheFile );                if( data != false )                {                    if( request.callback != false )                    {                        // Remove request from stack                        urlManager.popRequest();                        request.callback.run( CCURLRequest_cached, data, null );                        setTimeout( CCURLManagerUpdate, 500 );                        return;                    }                }            }        }                if( urlManager.ready() )        {            var domainTimeOuts = urlManager.domainTimeOuts;            var length = domainTimeOuts.length;            for( var i=0; i<domainTimeOuts.length; ++i )            {                var domainTimeOut = domainTimeOuts[i];                if( request.url.split( domainTimeOut.name ).length > 1 )                {                    var nextRequestTime = domainTimeOut.lastRequested + domainTimeOut.timeout;                    if( gEngine.lifetime < nextRequestTime )                    {                        setTimeout( CCURLManagerUpdate, 500 );                        return;                    }                    domainTimeOut.lastRequested = gEngine.lifetime;                    break;                }            }                        // Remove request from stack            urlManager.popRequest();                        // Being download            urlManager.download( request );        }	}}CCURLManager.prototype.download = function(request){    this.request = request;    this.open();    this.start();}CCURLManager.prototype.setDomainTimeOut = function(domain, timeout){	var domainTimeOuts = this.domainTimeOuts;	var length = domainTimeOuts.length;	for( var i=0; i<length; ++i )	{		if( domainTimeOuts[i].name == domain )		{			return;		}	}		var domainTimeOut = new Object();	domainTimeOut.name = domain;	domainTimeOut.timeout = timeout;	domainTimeOut.lastRequested = 0.0;	domainTimeOuts.push( domainTimeOut );}